#include <iostream>
#include <string>
#include <Windows.h>
#include <fstream>
#include <limits>


using std::getline;

#undef max

void menu();
void enterUser();
void checkUser();
void enterPass();
void checkPass();
void createUserName();
void checkIfUserExists();
void createPass();

int userLoopCounter = 0; // matches username with password
std::string passWord;
std::string inputUser;
std::string namesFromFile;
std::string passFromFile;

bool userNameLoop = true;
bool createUserLoop;
bool enterPassLoop = true;
bool passEntered = false;


int main()
{

	bool loop = true;		// loops the home menu

	while (loop)
	{
		int choiceInt;
		menu();
		std::cin >> choiceInt;

		while (!std::cin)
		{
			system("cls");
			std::cout << "Wrong input.. valid values are in the range 1-3. " << std::endl;
			system("pause");
			system("cls");
			menu();
			std::cin.clear();
			std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			std::cin >> choiceInt;
		}

		switch (choiceInt)
		{
		case 1:
		{
			enterUser();
			enterPass();
			loop = false;
			break;
		}
		case 2:
		{
			createUserName();
			system("cls");
			break;
		}
		case 3:
		{
			exit(0);
		}
		default:
		{
			system("cls");
			std::cout << "Invalid!" << std::endl;
			system("pause");
			system("cls");
			break;
		}
		}

	}

	system("cls");
	std::cout << "You have successfully logged in!" << std::endl << std::endl;
	system("pause");
	return 0;

}



void menu()
{
	std::cout << "What would you like to do?(Enter 1, 2, or 3)" << std::endl;
	std::cout << "1) Log In" << std::endl;
	std::cout << "2) Create Account " << std::endl;
	std::cout << "3) Exit " << std::endl;
}

void enterUser()
{
	while (userNameLoop) // Loops until the attempted user log in name matches one in the database.
	{
		system("cls");
		std::cout << "Enter Your Username:";
		std::cin >> inputUser;			// gathers the login attempt username
		checkUser();				// runs checkuser() function to validate the input
	}
}

void checkUser()
{

	std::ifstream userFile;
	userFile.open("C:\\Users\\Jack\\Desktop\\PasswordFolder\\userinfo.txt");

	for (int i = 1; i < 100000; i++)			// check each line in the text file to see if the users input matches any of the already existing usernames
	{
		getline(userFile, namesFromFile);		// getting usernames from userinfo.txt line by line and placing in namesfromfile string

		if (inputUser == namesFromFile)
		{
			userLoopCounter = i;				//create an integer value that tells which number line (in .txt file) the correct username is on and stores it in userLoopcounter variable
			userNameLoop = false;				//ends the while loop in enterUser() function
			userFile.close();
			return;
		}
		else if (inputUser != namesFromFile)	// if userinput doesnt = a name in file go back to beggining of for loop
		{
			if (userFile.eof())					// if we have read every line, tell user and return to enteruser() function
			{
				std::cout << "The username you entered did not match our records! Please try again!" << std::endl << std::endl;
				system("pause");
				userFile.close();
				return;							// returns to to enterUser() function
			}
		}
	}
}

void enterPass()
{
	while (enterPassLoop)
	{
		std::cout << "Enter your PassWord:";									// user password log in attempt
		std::cin >> passWord;
		checkPass();
		if (passEntered == true)
		{
			std::cout << "Enter your Username:" << inputUser << std::endl;		// re formats the log in screen if an incorrect password is entered
			std::cout << "Enter your PassWord:";
			std::cin >> passWord;
			checkPass();												// validates password (correlated to specific username in file)
		}
	}
}

void checkPass()
{

	std::ifstream passFile;
	passFile.open("C:\\Users\\Jack\\Desktop\\PasswordFolder\\passWordInfo.txt");

	for (int i = 1; i <= userLoopCounter; i++)
	{

		getline(passFile, passFromFile);						// loops through the password.txt file line by line until reaches same line number specific in the username.txt 

		if (i == userLoopCounter)								// check if entered password matches the specific password in .txt file (only checks if the computer has read up to correlated line
		{
			if (passWord == passFromFile)
			{
				std::cout << "You entered the correct password!" << std::endl << std::endl;
				passFile.close();
				enterPassLoop = false;
				passEntered = false;
				system("pause");
				return;

			}
			else if (passWord != passFromFile)
			{
				std::cout << "You entered an incorrect Password! Please try again!" << std::endl << std::endl;
				passFile.close();
				passEntered = true;
				system("pause");
				system("cls");
				return;
			}
		}
	}

	return;
}


void createUserName()
{
	createUserLoop = true;
	system("cls");
	while (createUserLoop)	// loop ends when the user has created a valid username
	{
		system("cls");
		std::cout << "Enter desired username:" << std::endl;
		checkIfUserExists();
	}

	createPass();	// opens the createPass() function in order to create and store a password (correlated to the newly created username)
	return;			// returns to main function

}

void checkIfUserExists()
{
	std::cin >> inputUser;

	std::ifstream userFile;
	userFile.open("C:\\Users\\Jack\\Desktop\\PasswordFolder\\userinfo.txt");

	if (!userFile.is_open())
	{
		std::cout << "Error opening file!";
		system("pause");
	}

	for (int i = 1; i < 10000; i++)
	{
		getline(userFile, namesFromFile);

		if (inputUser == namesFromFile)
		{
			std::cout << "That user name already exists! Please choose another name!" << std::endl;
			system("pause");
			userFile.close();
			return;
		}

		else if (inputUser != namesFromFile)
		{
			if (userFile.eof())
			{
				std::ofstream userNameFile;
				userNameFile.open("C:\\Users\\Jack\\Desktop\\userInfo.txt", std::fstream::app);		// save username to username file
				userNameFile << std::endl << inputUser;
				userNameFile.close();
				userFile.close();
				createUserLoop = false;
				userFile.close();
				std::cout << "Your username has been saved!" << std::endl;
				system("pause");
				return;
			}
		}
	}

}


void createPass()
{
	system("cls");
	std::cout << "Enter your desired password: ";		// user creates a password
	std::cin >> passWord;

	std::ofstream passWordFile;
	passWordFile.open("C:\\Users\\Jack\\Desktop\\PasswordFolder\\passWordInfo.txt", std::fstream::app);	// store the created password in the .txt file
	passWordFile << std::endl << passWord;
	passWordFile.close();
	std::cout << "Your Password has been stored!" << std::endl;
	system("pause");
	return;													// returns to the createUserName() function

}
